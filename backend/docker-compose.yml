
services: # Aqui você define todos os serviços (contêineres) da sua aplicação

  zookeeper: # O Zookeeper é necessário para o Kafka funcionar
    image: confluentinc/cp-zookeeper:7.5.0 # Imagem oficial do Zookeeper da Confluent
    container_name: zookeeper # Nome fácil para o contêiner
    hostname: zookeeper # Nome do host para que outros serviços possam encontrá-lo
    ports:
      - "2181:2181" # Mapeia a porta do contêiner para a sua máquina local (HOST:CONTAINER)
    environment: # Variáveis de ambiente para configurar o Zookeeper
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka: # O serviço Apache Kafka
    image: confluentinc/cp-kafka:7.5.0 # Imagem oficial do Kafka da Confluent
    container_name: kafka # Nome fácil para o contêiner
    hostname: kafka # Nome do host para que outros serviços possam encontrá-lo
    ports:
      - "9092:9092" # Mapeia a porta do Kafka
    environment: # Variáveis de ambiente para configurar o Kafka
      KAFKA_BROKER_ID: 1 # ID único para este broker Kafka
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181' # O Kafka precisa saber onde encontrar o Zookeeper
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092 # Como outros contêineres e a máquina local se conectarão ao Kafka
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1 # Configuração para tópicos internos do Kafka (para teste local)
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
    depends_on: # Garante que o Zookeeper inicie antes do Kafka
      - zookeeper

  instrument_service: # Seu primeiro microsserviço
    build: ./src/services/instrument_service # Diz ao Docker Compose para construir a imagem a partir do Dockerfile nesta pasta
    container_name: instrument_service # Nome fácil para o contêiner
    ports:
      - "8000:8000" # Mapeia a porta do FastAPI para a sua máquina local (8000:8000)
    environment: # Variáveis de ambiente para o seu serviço
      KAFKA_BROKER: kafka:9092 # Informa ao seu serviço onde o Kafka pode ser encontrado (nome do host do contêiner Kafka)
    depends_on: # Garante que o Kafka (e, por tabela, o Zookeeper) esteja de pé antes do seu serviço
      - kafka
    # Você pode descomentar o comando abaixo se o seu serviço estiver iniciando muito rápido
    # e o Kafka não estiver totalmente pronto. É um "sleep" para dar tempo.
    # command: sh -c "sleep 15 && uvicorn main:app --host 0.0.0.0 --port 8000"

  market_data_service: # NOVO SERVIÇO
    build: ./src/services/market_data_service # Caminho para o Dockerfile do serviço de download de dados de mercado
    container_name: market_data_service
    environment:
      KAFKA_BROKER: kafka:9092
      # Definir as datas e períodos de download aqui!
      DOWNLOAD_START_DATE: 'None' # Ou None se usar 'PERIOD'
      DOWNLOAD_END_DATE: 'None'   # Ou None se usar 'PERIOD'
      DOWNLOAD_PERIOD: '1y'            # Exemplo: '1y', '6mo', 'max' (use um ou outro, START_DATE/END_DATE ou PERIOD)
      DOWNLOAD_INTERVAL: '1d'          # Exemplo: '1d', '1wk', '1mo', '1h'
    depends_on:
      - kafka # Depende do Kafka para consumir e produzir
      - instrument_service # Depende do primeiro serviço para garantir que o tópico já tenha sido criado pelo producer, se não houver mensagens