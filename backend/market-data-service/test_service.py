#!/usr/bin/env python3
"""
Script de teste para o Market Data Service.

Este script executa testes b√°sicos para verificar se o microservi√ßo
est√° funcionando corretamente.

Usage:
    python test_service.py
"""

import asyncio
import sys

import httpx


async def test_market_data_service():
    """
    Executa uma s√©rie de testes no Market Data Service.
    
    Returns:
        True se todos os testes passaram, False caso contr√°rio
    """
    base_url = "http://localhost:8002"
    
    print("üß™ Iniciando testes do Market Data Service...")
    print(f"üîó URL Base: {base_url}")
    print("-" * 60)
    
    async with httpx.AsyncClient(timeout=30.0) as client:
        try:
            # Teste 1: Health Check
            print("1Ô∏è‚É£  Testando health check...")
            response = await client.get(f"{base_url}/health")
            assert response.status_code == 200
            health_data = response.json()
            print(f"   ‚úÖ Status: {health_data.get('status')}")
            print(f"   ‚úÖ Vers√£o: {health_data.get('version')}")
            
            # Teste 2: Informa√ß√µes do servi√ßo
            print("\n2Ô∏è‚É£  Testando endpoint de informa√ß√µes...")
            response = await client.get(f"{base_url}/")
            assert response.status_code == 200
            info_data = response.json()
            print(f"   ‚úÖ Servi√ßo: {info_data.get('service')}")
            print(f"   ‚úÖ Uptime: {info_data.get('uptime_seconds')}s")
            
            # Teste 3: Ping
            print("\n3Ô∏è‚É£  Testando ping...")
            response = await client.get(f"{base_url}/ping")
            assert response.status_code == 200
            ping_data = response.json()
            print(f"   ‚úÖ Message: {ping_data.get('message')}")
            
            # Teste 4: Busca de a√ß√µes
            print("\n4Ô∏è‚É£  Testando busca de a√ß√µes...")
            response = await client.get(
                f"{base_url}/api/v1/market-data/stocks/search?query=Petrobras&limit=5"
            )
            assert response.status_code == 200
            search_data = response.json()
            print(f"   ‚úÖ Resultados encontrados: {search_data.get('results_found')}")
            if search_data.get('results'):
                first_result = search_data['results'][0]
                print(f"   ‚úÖ Primeiro resultado: {first_result.get('symbol')} - {first_result.get('name')}")
            
            # Teste 5: Dados de a√ß√£o espec√≠fica
            print("\n5Ô∏è‚É£  Testando dados de a√ß√£o espec√≠fica (PETR4.SA)...")
            response = await client.get(
                f"{base_url}/api/v1/market-data/stocks/PETR4.SA?period=5d&include_fundamentals=true"
            )
            assert response.status_code == 200
            stock_data = response.json()
            print(f"   ‚úÖ S√≠mbolo: {stock_data.get('symbol')}")
            print(f"   ‚úÖ Empresa: {stock_data.get('company_name')}")
            print(f"   ‚úÖ Pre√ßo atual: {stock_data.get('current_price')}")
            if stock_data.get('historical_data'):
                print(f"   ‚úÖ Pontos hist√≥ricos: {len(stock_data['historical_data'])}")
            
            # Teste 6: Valida√ß√£o de ticker
            print("\n6Ô∏è‚É£  Testando valida√ß√£o de ticker...")
            response = await client.get(
                f"{base_url}/api/v1/market-data/tickers/PETR4.SA/validate"
            )
            assert response.status_code == 200
            validation_data = response.json()
            print(f"   ‚úÖ Ticker v√°lido: {validation_data.get('is_valid')}")
            print(f"   ‚úÖ Existe: {validation_data.get('exists')}")
            
            # Teste 7: A√ß√µes em tend√™ncia
            print("\n7Ô∏è‚É£  Testando a√ß√µes em tend√™ncia...")
            response = await client.get(
                f"{base_url}/api/v1/market-data/stocks/trending?market=BR&limit=3"
            )
            assert response.status_code == 200
            trending_data = response.json()
            print(f"   ‚úÖ A√ß√µes em tend√™ncia: {trending_data.get('total_stocks')}")
            
            # Teste 8: Requisi√ß√£o em lote (POST)
            print("\n8Ô∏è‚É£  Testando requisi√ß√£o em lote...")
            bulk_request = {
                "tickers": ["PETR4.SA", "VALE3.SA", "ITUB4.SA"],
                "period": "5d",
                "interval": "1d",
                "include_fundamentals": False
            }
            response = await client.post(
                f"{base_url}/api/v1/market-data/bulk",
                json=bulk_request
            )
            assert response.status_code == 200
            bulk_data = response.json()
            print(f"   ‚úÖ Total de tickers: {bulk_data.get('total_tickers')}")
            print(f"   ‚úÖ Sucessos: {bulk_data.get('successful_requests')}")
            print(f"   ‚úÖ Falhas: {bulk_data.get('failed_requests')}")
            
            # Teste 9: Teste de ticker inv√°lido
            print("\n9Ô∏è‚É£  Testando ticker inv√°lido...")
            response = await client.get(
                f"{base_url}/api/v1/market-data/stocks/INVALID_TICKER"
            )
            # Pode retornar 502 (Bad Gateway) se o provedor falhar
            print(f"   ‚úÖ Status para ticker inv√°lido: {response.status_code}")
            
            # Teste 10: Documenta√ß√£o da API
            print("\nüîü Testando documenta√ß√£o da API...")
            response = await client.get(f"{base_url}/docs")
            assert response.status_code == 200
            print("   ‚úÖ Documenta√ß√£o Swagger dispon√≠vel")
            
            print("\n" + "=" * 60)
            print("üéâ TODOS OS TESTES PASSARAM! üéâ")
            print("‚úÖ Market Data Service est√° funcionando corretamente")
            print("=" * 60)
            
            return True
            
        except AssertionError as e:
            print(f"\n‚ùå Teste falhou: {e}")
            return False
        except httpx.RequestError as e:
            print(f"\n‚ùå Erro de conex√£o: {e}")
            print("üí° Certifique-se de que o servi√ßo est√° rodando em http://localhost:8002")
            return False
        except Exception as e:
            print(f"\n‚ùå Erro inesperado: {e}")
            return False


def print_usage():
    """Imprime instru√ß√µes de uso."""
    print("""
üìã Market Data Service - Script de Teste

üöÄ Como executar:
   1. Certifique-se de que o Market Data Service est√° rodando:
      uvicorn app.main:app --host 0.0.0.0 --port 8002
   
   2. Execute este script:
      python test_service.py

üîß Pr√©-requisitos:
   - Python 3.8+
   - httpx (pip install httpx)
   - Market Data Service rodando na porta 8002

üìä Testes inclu√≠dos:
   ‚úì Health check
   ‚úì Informa√ß√µes do servi√ßo
   ‚úì Ping/conectividade
   ‚úì Busca de a√ß√µes
   ‚úì Dados de a√ß√£o espec√≠fica
   ‚úì Valida√ß√£o de ticker
   ‚úì A√ß√µes em tend√™ncia
   ‚úì Requisi√ß√µes em lote
   ‚úì Tratamento de erros
   ‚úì Documenta√ß√£o da API
""")


if __name__ == "__main__":
    if len(sys.argv) > 1 and sys.argv[1] in ["-h", "--help", "help"]:
        print_usage()
        sys.exit(0)
    
    print("üîç Verificando depend√™ncias...")
    try:
        import httpx
        print("‚úÖ httpx dispon√≠vel")
    except ImportError:
        print("‚ùå httpx n√£o encontrado. Instale com: pip install httpx")
        sys.exit(1)
    
    # Executar testes
    try:
        success = asyncio.run(test_market_data_service())
        sys.exit(0 if success else 1)
    except KeyboardInterrupt:
        print("\n\n‚ö†Ô∏è  Testes interrompidos pelo usu√°rio")
        sys.exit(130)
