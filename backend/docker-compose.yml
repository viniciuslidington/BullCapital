version: '3.12' # Or 3.8, which is more common

services:
  db:
    image: postgres:14
    container_name: postgres-db
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: bullcapital
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    networks:
      - dev-network # Assign to network
    # Add healthcheck so auth-service can wait for it
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d bullcapital"]
      interval: 5s
      timeout: 5s
      retries: 5

  auth-service:
    build:
      context: ./auth-service
    container_name: auth-service
    ports:
      - "8003:8003"
    environment:
      - PYTHONUNBUFFERED=1
      # --- Database Connection Env Vars ---
      - USER=postgres
      - PASSWORD=postgres
      - HOST=db                     # Service name of the Postgres container
      - PORT=5432                   # Standard Postgres port
      - DBNAME=bullcapital
      - USE_SSL=false               # Disable SSL for local Postgres connection
      # --- JWT & App Settings ---
      # Replace 'your-super-secret-jwt-key-change-in-prod' with a strong secret key,
      # especially for production.
      - SECRET_KEY=your-super-secret-jwt-key-change-in-prod
      - ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=30
      - DEBUG_SQL=false
      # Ensure these origins match where your frontend is running
      - ALLOWED_ORIGINS=["http://localhost:3000","http://localhost:8000"]
    restart: unless-stopped
    # Use the correct module path for your FastAPI app
    # Adjust 'app.app:app' if your main file or app instance is named differently
    # Using 'sh -c' is fine, but direct command is often cleaner if no complex shell logic is needed.
    command: uvicorn app:app --host 0.0.0.0 --port 8003 --reload
    depends_on:
      db:
        # Wait for the database to be ready (requires healthcheck on db service)
        condition: service_healthy
    networks:
      - dev-network # Assign to network

  market-data-service:
    build:
      context: ./market-data-service
    container_name: market-data-service
    ports:
      - "8002:8002"
    environment:
      - PYTHONUNBUFFERED=1
      # Add other necessary env vars for market-data-service if needed
    restart: unless-stopped
    command: uvicorn app.main:app --host 0.0.0.0 --port 8002 --reload
    networks:
      - dev-network # Assign to network

  gateway-service:
    build:
      context: ./gateway-service
    container_name: gateway-service
    ports:
      - "8000:8000"
    environment:
      - PYTHONUNBUFFERED=1
      # Tell the gateway where the auth service is located within the Docker network
      - AUTH_SERVICE_URL=http://auth-service:8003
      # Add other necessary env vars for gateway-service if needed (e.g., MARKET_DATA_SERVICE_URL)
    restart: unless-stopped
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    depends_on:
      - auth-service
      - market-data-service
    networks:
      - dev-network # Assign to network

volumes:
  pgdata:

networks:
  dev-network:
    driver: bridge